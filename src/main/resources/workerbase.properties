queue.host=localhost
queue.port=5672
queue.user=guest
queue.password=guest
queue.virtualhost=/
queue.prefetchCount=2
queue.connecting.retryAfterSeconds=10

graviton.prometheus.port=9999

graviton.workerId=base
graviton.workerName=graviton-worker-${worker.name}
graviton.workerClass=

# can also be a comma separated list
graviton.subscription=

application.version=${project.version}
application.name=${project.name}

# Graviton Api Subnet authentication
graviton.authentication.prefix.username=subnet-
graviton.authentication.header.name=x-graviton-authentication

# base url (protocol and host) to target gravitonApi service
graviton.base.url=http://api.vcap.me

# serialization / deserialization configuration
graviton.date.format=yyyy-MM-dd'T'HH:mm:ssZ
graviton.rql.date.format=yyyy-MM-dd'T'HH:mm:ss'Z'
graviton.timezone=UTC

# if we should enforce http1.1 in okhttp connections
graviton.okhttp.shouldRetry=true
graviton.okhttp.forcehttp11=true
graviton.okhttp.trustAll=true

# how many times should we try to fetch an EventStatus before giving up (404 case)
graviton.statushandler.retrylimit=30

# location to load / store the POJO -> endpoint association
#graviton.assoc.file.location=target/generated-sources/gdk-resources/assoc
graviton.assoc.file.location=target/generated-sources/gdk-java/assoc